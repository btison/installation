---
- include_role:
    name: namespace
    tasks_from: create
  vars:
    name: "{{ sso_namespace }}"
    display_name: "{{ sso_namespace_display_name | default('Red Hat Single Sign-On')}}"
    monitor: true
    is_service: true



- name: "Create required objects"
  shell: "oc create -f {{ item }} -n {{ sso_namespace }}"
  with_items: "{{ rhsso_operator_resource_items }}"
  register: rhsso_operator_resources_result
  failed_when: rhsso_operator_resources_result.stderr != '' and 'AlreadyExists' not in rhsso_operator_resources_result.stderr

- name: "Create keycloak resource template"
  template:
    src: "keycloak.json.j2"
    dest: "/tmp/keycloak.json"

- name: "Create keycloak resource"
  shell: oc create -f /tmp/keycloak.json -n {{ sso_namespace }}
  register: rhsso_keycloak
  failed_when: rhsso_keycloak.stderr != '' and 'AlreadyExists' not in rhsso_keycloak.stderr

- name: "Wait for sso-postgresql deployment config to be created"
  shell: oc get dc sso-postgresql -n {{ sso_namespace }}
  register: result
  until: result.stdout
  retries: 50
  delay: 1
  failed_when: not result.stdout
  changed_when: False

- name: "Patch sso-postgresql dc"
  shell: oc patch dc sso-postgresql -p '{"spec":{"triggers":[{"type":"ImageChange", "imageChangeParams":{"automatic":true,"containerNames":["sso-postgresql"],"from":{"kind":"ImageStreamTag","namespace":"openshift","name":"postgresql:9.6"}}}]}}' -n {{ sso_namespace }}

- name: "Wait for keycloak to be ready"
  shell: "oc get keycloak/rhsso -o jsonpath='{.status.phase}' -n {{ sso_namespace }}"
  register: result
  until: result.stdout == 'reconcile'
  retries: 50
  delay: 10
  changed_when: False
  when: rhsso_provision_immediately
